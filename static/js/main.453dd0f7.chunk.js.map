{"version":3,"sources":["store/state.ts","components/Canvas.tsx","components/InputPreviewCanvas.tsx","components/PredButton.tsx","components/PredList.tsx","components/ResetButton.tsx","components/MainLayout.tsx","components/App.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["contextState","atom","key","default","scoreState","Array","map","_","inputImageDataState","Canvas","canvasRef","useRef","useRecoilState","context","setContext","useEffect","mouseDown","start","x","y","end","handleMouseDown","evt","canvasOffsetLeft","current","offsetLeft","canvasOffsetTop","offsetTop","clientX","clientY","handleMouseUp","handleMouseMove","beginPath","moveTo","lineTo","strokeStyle","lineWidth","lineCap","stroke","closePath","renderCtx","getContext","addEventListener","removeEventListener","ref","className","sCanvas","width","height","css","InputPreviewCanvas","inputImageData","useRecoilValue","putImageData","clearRect","style","backgroundColor","PredButton","useState","model","setModel","setScore","useSetRecoilState","setInputImageData","a","tf","loadedModel","console","error","loadModel","convertImageData","tmpCanvas","document","createElement","drawImage","canvas","imageData","getImageData","i","data","length","avg","predict","score","input","fromPixels","toFloat","div","expandDims","result","isArray","dataSync","forEach","d","push","onClickPrediction","Button","variant","color","onClick","PredList","classes","useStyles","items","sListContainer","List","list","s","ListItem","item","ListItemText","itemNum","primary","sGraphContainer","sGraph","itemPer","toFixed","Divider","makeStyles","theme","createStyles","palette","background","paper","padding","display","gridTemplateColumns","textAlign","text","zIndex","pred","ResetButton","resetScore","useResetRecoilState","resetInputImageData","MainLayout","Grid","container","spacing","xs","sm","sCanvasContainer","sControllerContainer","App","createTheme","type","ThemeProvider","sContainer","sCardContainer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"wZAEaA,EAAeC,YAAsC,CACjEC,IAAK,gBACLC,QAAS,OAGGC,EAAaH,YAAe,CACxCC,IAAK,cACLC,QAAS,YAAIE,MAAM,KAAKC,KAAI,SAAAC,GAAC,OAAI,OAGrBC,EAAsBP,YAAuB,CACzDC,IAAK,uBACLC,QAAS,O,QCHGM,EAAmB,WAC/B,IAAMC,EAAYC,iBAA0B,MADP,EAEPC,YAAeZ,GAFR,mBAE9Ba,EAF8B,KAErBC,EAFqB,KA+ErC,OA3EAC,qBAAU,WACT,IAAIC,GAAqB,EACrBC,EAAqB,CAAEC,EAAG,EAAGC,EAAG,GAChCC,EAAmB,CAAEF,EAAG,EAAGC,EAAG,GAElC,SAASE,EAAgBC,GACxBN,GAAY,EACZ,IAAMO,EAAmBb,EAAUc,QAAUd,EAAUc,QAAQC,WAAa,EACtEC,EAAkBhB,EAAUc,QAAUd,EAAUc,QAAQG,UAAY,EAE1EV,EAAQ,CACPC,EAAGI,EAAIM,QAAUL,EACjBJ,EAAGG,EAAIO,QAAUH,GAGlBN,EAAM,CACLF,EAAGI,EAAIM,QAAUL,EACjBJ,EAAGG,EAAIO,QAAUH,GAInB,SAASI,EAAcR,GACtBN,GAAY,EAGb,SAASe,EAAgBT,GACxB,GAAIN,GAAaH,EAAS,CACzB,IAAMU,EAAmBb,EAAUc,QAAUd,EAAUc,QAAQC,WAAa,EACtEC,EAAkBhB,EAAUc,QAAUd,EAAUc,QAAQG,UAAY,EAE1EV,EAAQ,CACPC,EAAGE,EAAIF,EACPC,EAAGC,EAAID,GAGRC,EAAM,CACLF,EAAGI,EAAIM,QAAUL,EACjBJ,EAAGG,EAAIO,QAAUH,GAIlBb,EAAQmB,YACRnB,EAAQoB,OAAOhB,EAAMC,EAAGD,EAAME,GAC9BN,EAAQqB,OAAOd,EAAIF,EAAGE,EAAID,GAC1BN,EAAQsB,YAAc,QACtBtB,EAAQuB,UAAY,GACpBvB,EAAQwB,QAAU,QAClBxB,EAAQyB,SACRzB,EAAQ0B,aAIV,GAAI7B,EAAUc,QAAS,CACtB,IAAMgB,EAAY9B,EAAUc,QAAQiB,WAAW,MAE3CD,IACH9B,EAAUc,QAAQkB,iBAAiB,YAAarB,GAChDX,EAAUc,QAAQkB,iBAAiB,UAAWZ,GAC9CpB,EAAUc,QAAQkB,iBAAiB,YAAaX,GAEhDjB,EAAW0B,IAIb,OAAO,WACF9B,EAAUc,UACbd,EAAUc,QAAQmB,oBAAoB,YAAatB,GACnDX,EAAUc,QAAQmB,oBAAoB,UAAWb,GACjDpB,EAAUc,QAAQmB,oBAAoB,YAAaZ,OAGnD,CAAClB,IAIG,wBAAQ+B,IAAKlC,EAAWmC,UAAWC,EAASC,MAAO,IAAKC,OAAQ,OAGlEF,EAAUG,YAAH,wDCvFAC,EAA+B,WAC3C,IAAMC,EAAiBC,YAAe5C,GAChCE,EAAYC,iBAA0B,MAa5C,OAXAI,qBAAU,WACT,GAAKL,EAAUc,QAAf,CACA,IAAMX,EAAUH,EAAUc,QAAQiB,WAAW,MAEzCU,EACHtC,EAAQwC,aAAaF,EAAgB,EAAG,GAExCtC,EAAQyC,UAAU,EAAG,EAbD,UAenB,CAACH,IAGH,wBACCP,IAAKlC,EACL6C,MAAO,CAAEC,gBAAiB,SAC1BT,MArBoB,GAsBpBC,OAtBoB,M,0CCKVS,EAAuB,WAAO,IAAD,EACfC,qBADe,mBAClCC,EADkC,KAC3BC,EAD2B,KAEnC/C,EAAUuC,YAAepD,GACzB6D,EAAWC,YAAkB1D,GAC7B2D,EAAoBD,YAAkBtD,GAG5CO,qBAAU,YACM,uCAAG,4BAAAiD,EAAA,+EAEUC,IAZT,2BAUD,OAEVC,EAFU,OAGhBN,EAASM,GAHO,gDAKhBC,QAAQC,MAAM,CAAEA,MAAK,OALL,yDAAH,qDAQfC,KACE,IAMH,IAAMC,EAAmB,WACxB,GAAKzD,EAAL,CAEA,IAIM0D,EAAYC,SAASC,cAAc,UAAUhC,WAAW,MAC9D8B,EAAUG,UAAU7D,EAAQ8D,OAAQ,EAAG,EALpB,GACC,IAQpB,IADA,IAAIC,EAAYL,EAAUM,aAAa,EAAG,EARvB,GACC,IAQXC,EAAI,EAAGA,EAAIF,EAAUG,KAAKC,OAAQF,GAAK,EAAG,CAClD,IAAMG,GAAOL,EAAUG,KAAKD,GAAKF,EAAUG,KAAKD,EAAI,GAAKF,EAAUG,KAAKD,EAAI,IAAM,EAClFF,EAAUG,KAAKD,GAAKF,EAAUG,KAAKD,EAAI,GAAKF,EAAUG,KAAKD,EAAI,GAAKG,EAGrE,OAAOL,IAQFM,EAAU,SAACN,GAChB,GAAKjB,EAAL,CAEA,IAAMwB,EAAQlB,KAAQ,WAErB,IACImB,EAAQnB,IAAWoB,WAAWT,EADjB,GACsCU,UAcvD,OARAF,GAHAA,EAAQA,EAAMG,IAAItB,IAAU,OAGduB,aAQP7B,EAAMuB,QAAQE,MAGhBK,EAAmB,GAKzB,OAHcpF,MAAMqF,QAAQP,GAASA,EAAM,GAAGQ,WAAaR,EAAMQ,YAC3DC,SAAQ,SAAAC,GAAC,OAAIJ,EAAOK,KAAKD,MAExBJ,IAGFM,EAAiB,uCAAG,8BAAA/B,EAAA,yDACnBY,EAAYN,IADO,oDAGzBP,EAAkBa,GAEZO,EAAQD,EAAQN,GALG,iDAQzBf,EAASsB,GARgB,2CAAH,qDAWvB,OACC,cAACa,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAASJ,EAArD,sB,sDC5FWK,EAAqB,WACjC,IAAMC,EAAUC,IACVnB,EAAQ/B,YAAehD,GACvBmG,EAAK,YAAOlG,MAAM,KAExB,OACC,qBAAKwC,UAAW2D,EAAhB,SACC,cAACC,EAAA,EAAD,CAAM5D,UAAWwD,EAAQK,KAAzB,SACEvB,EAAM7E,KAAI,SAACqG,EAAG7B,GAAJ,OACV,gCACC,eAAC8B,EAAA,EAAD,CAAU/D,UAAWwD,EAAQQ,KAA7B,UACC,cAACC,EAAA,EAAD,CAAcjE,UAAWwD,EAAQU,QAASC,QAASlC,IACnD,sBAAKjC,UAAWoE,EAAhB,UACC,qBAAKpE,UAAWqE,EAAW,IAAJP,KACvB,cAACG,EAAA,EAAD,CAAcjE,UAAWwD,EAAQc,QAASH,SAAc,IAAJL,GAASS,QAAQ,GAAK,aAG3Eb,EAAMvB,OAASF,EAAI,GAAK,cAACuC,EAAA,EAAD,MARhBvC,WAgBTwB,EAAYgB,aAAW,SAACC,GAAD,OAC5BC,YAAa,CACZd,KAAM,CACL3D,MAAO,OACPS,gBAAiB+D,EAAME,QAAQC,WAAWC,MAC1CC,QAAS,GAEVf,KAAM,CACLgB,QAAS,OACTC,oBAAqB,WACrBF,QAAS,GAEVb,QAAS,CACRa,QAAS,SACTG,UAAW,SACX7B,MAAOqB,EAAME,QAAQO,KAAKhB,SAE3BG,QAAS,CACRY,UAAW,OACXE,OAAQ,EACR/B,MAAOqB,EAAME,QAAQO,KAAKhB,cAKvBR,EAAiBvD,YAAH,mFAKdgE,EAAkBhE,YAAH,mDAIfiE,EAAS,SAACgB,GAAD,OAAkBjF,YAAjB,IAAD,gKAKLiF,ICnEGC,EAAwB,WACpC,IAAMtH,EAAUuC,YAAepD,GACzBoI,EAAaC,YAAoBjI,GACjCkI,EAAsBD,YAAoB7H,GAUhD,OACC,cAACwF,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,YAAYC,QAT1B,WAChBtF,GACHA,EAAQyC,UAAU,EAAG,EAAGzC,EAAQ8D,OAAO5B,MAAOlC,EAAQ8D,OAAO3B,QAE9DoF,IACAE,KAIA,oBCVWC,EAAuB,WACnC,OACC,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACC,cAACF,EAAA,EAAD,CAAM3B,MAAI,EAAC8B,GAAI,GAAIC,GAAI,EAAvB,SACC,sBAAK/F,UAAWgG,EAAhB,UACC,cAAC,EAAD,IACA,sBAAKhG,UAAWiG,EAAhB,UACC,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,YAIH,cAACN,EAAA,EAAD,CAAM3B,MAAI,EAAC8B,GAAI,GAAIC,GAAI,EAAvB,SACC,qBAAK/F,UAAW2D,EAAhB,SACC,cAAC,EAAD,YAOCqC,EAAmB5F,YAAH,8DAKhB6F,EAAuB7F,YAAH,iIAOpBuD,EAAiBvD,YAAH,8DCtCP8F,EAAgB,WAC5B,IAAMxB,EAAQyB,YAAY,CACzBvB,QAAS,CACRwB,KAAM,UAIR,OACC,cAACC,EAAA,EAAD,CAAe3B,MAAOA,EAAtB,SACC,qBAAK1E,UAAWsG,GAAhB,SACC,qBAAKtG,UAAWuG,GAAhB,SACC,cAAC,EAAD,WAOCA,GAAiBnG,YAAH,iJAQdkG,GAAalG,YAAH,2WCjBDoG,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCGMQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCTnCC,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,IAAD,UACC,cAAC,EAAD,QAGF7F,SAAS8F,eAAe,SDsHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAACkB,GACLA,EAAaC,gBAEdC,OAAM,SAACxG,GACND,QAAQC,MAAMA,EAAMyG,YCjH5BxB,O","file":"static/js/main.453dd0f7.chunk.js","sourcesContent":["import { atom } from 'recoil';\r\n\r\nexport const contextState = atom<CanvasRenderingContext2D | null>({\r\n\tkey: 'state/context',\r\n\tdefault: null\r\n});\r\n\r\nexport const scoreState = atom<number[]>({\r\n\tkey: 'state/score',\r\n\tdefault: [...Array(10)].map(_ => 0)\r\n});\r\n\r\nexport const inputImageDataState = atom<ImageData | null>({\r\n\tkey: 'state/inputimagedata',\r\n\tdefault: null\r\n});\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useRef } from 'react';\r\nimport { useRecoilState } from 'recoil';\r\nimport { css } from '@emotion/css';\r\nimport { contextState } from '../store/state';\r\n\r\ntype Coordinates = {\r\n\tx: number;\r\n\ty: number;\r\n};\r\n\r\nexport const Canvas: React.FC = () => {\r\n\tconst canvasRef = useRef<HTMLCanvasElement>(null);\r\n\tconst [context, setContext] = useRecoilState(contextState);\r\n\r\n\tuseEffect(() => {\r\n\t\tlet mouseDown: boolean = false;\r\n\t\tlet start: Coordinates = { x: 0, y: 0 };\r\n\t\tlet end: Coordinates = { x: 0, y: 0 };\r\n\r\n\t\tfunction handleMouseDown(evt: MouseEvent) {\r\n\t\t\tmouseDown = true;\r\n\t\t\tconst canvasOffsetLeft = canvasRef.current ? canvasRef.current.offsetLeft : 0;\r\n\t\t\tconst canvasOffsetTop = canvasRef.current ? canvasRef.current.offsetTop : 0;\r\n\r\n\t\t\tstart = {\r\n\t\t\t\tx: evt.clientX - canvasOffsetLeft,\r\n\t\t\t\ty: evt.clientY - canvasOffsetTop\r\n\t\t\t};\r\n\r\n\t\t\tend = {\r\n\t\t\t\tx: evt.clientX - canvasOffsetLeft,\r\n\t\t\t\ty: evt.clientY - canvasOffsetTop\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tfunction handleMouseUp(evt: MouseEvent) {\r\n\t\t\tmouseDown = false;\r\n\t\t}\r\n\r\n\t\tfunction handleMouseMove(evt: MouseEvent) {\r\n\t\t\tif (mouseDown && context) {\r\n\t\t\t\tconst canvasOffsetLeft = canvasRef.current ? canvasRef.current.offsetLeft : 0;\r\n\t\t\t\tconst canvasOffsetTop = canvasRef.current ? canvasRef.current.offsetTop : 0;\r\n\r\n\t\t\t\tstart = {\r\n\t\t\t\t\tx: end.x,\r\n\t\t\t\t\ty: end.y\r\n\t\t\t\t};\r\n\r\n\t\t\t\tend = {\r\n\t\t\t\t\tx: evt.clientX - canvasOffsetLeft,\r\n\t\t\t\t\ty: evt.clientY - canvasOffsetTop\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Draw our path\r\n\t\t\t\tcontext.beginPath();\r\n\t\t\t\tcontext.moveTo(start.x, start.y);\r\n\t\t\t\tcontext.lineTo(end.x, end.y);\r\n\t\t\t\tcontext.strokeStyle = 'white';\r\n\t\t\t\tcontext.lineWidth = 25;\r\n\t\t\t\tcontext.lineCap = 'round';\r\n\t\t\t\tcontext.stroke();\r\n\t\t\t\tcontext.closePath();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (canvasRef.current) {\r\n\t\t\tconst renderCtx = canvasRef.current.getContext('2d');\r\n\r\n\t\t\tif (renderCtx) {\r\n\t\t\t\tcanvasRef.current.addEventListener('mousedown', handleMouseDown);\r\n\t\t\t\tcanvasRef.current.addEventListener('mouseup', handleMouseUp);\r\n\t\t\t\tcanvasRef.current.addEventListener('mousemove', handleMouseMove);\r\n\r\n\t\t\t\tsetContext(renderCtx);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn function cleanup() {\r\n\t\t\tif (canvasRef.current) {\r\n\t\t\t\tcanvasRef.current.removeEventListener('mousedown', handleMouseDown);\r\n\t\t\t\tcanvasRef.current.removeEventListener('mouseup', handleMouseUp);\r\n\t\t\t\tcanvasRef.current.removeEventListener('mousemove', handleMouseMove);\r\n\t\t\t}\r\n\t\t};\r\n\t}, [context]);\r\n\r\n\t// =============================================\r\n\r\n\treturn <canvas ref={canvasRef} className={sCanvas} width={300} height={300}></canvas>;\r\n};\r\n\r\nconst sCanvas = css`\r\n\tbackground-color: black;\r\n`;\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { inputImageDataState } from '../store/state';\r\n\r\nconst inputImageSize = 28;\r\n\r\nexport const InputPreviewCanvas: React.FC = () => {\r\n\tconst inputImageData = useRecoilValue(inputImageDataState);\r\n\tconst canvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!canvasRef.current) return;\r\n\t\tconst context = canvasRef.current.getContext('2d')!;\r\n\r\n\t\tif (inputImageData) {\r\n\t\t\tcontext.putImageData(inputImageData, 0, 0);\r\n\t\t} else {\r\n\t\t\tcontext.clearRect(0, 0, inputImageSize, inputImageSize);\r\n\t\t}\r\n\t}, [inputImageData]);\r\n\r\n\treturn (\r\n\t\t<canvas\r\n\t\t\tref={canvasRef}\r\n\t\t\tstyle={{ backgroundColor: 'black' }}\r\n\t\t\twidth={inputImageSize}\r\n\t\t\theight={inputImageSize}></canvas>\r\n\t);\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\r\nimport { Button } from '@material-ui/core';\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport { contextState, inputImageDataState, scoreState } from '../store/state';\r\n\r\n// const mlpModelPath = './assets/mlp/model.json';\r\nconst cnnModelPath = './assets/cnn/model.json';\r\n\r\nexport const PredButton: React.FC = () => {\r\n\tconst [model, setModel] = useState<tf.LayersModel>();\r\n\tconst context = useRecoilValue(contextState);\r\n\tconst setScore = useSetRecoilState(scoreState);\r\n\tconst setInputImageData = useSetRecoilState(inputImageDataState);\r\n\r\n\t// Model Load\r\n\tuseEffect(() => {\r\n\t\tconst loadModel = async () => {\r\n\t\t\ttry {\r\n\t\t\t\tconst loadedModel = await tf.loadLayersModel(cnnModelPath);\r\n\t\t\t\tsetModel(loadedModel);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error({ error });\r\n\t\t\t}\r\n\t\t};\r\n\t\tloadModel();\r\n\t}, []);\r\n\r\n\t/**\r\n\t * canvasデータを変換する\r\n\t * @returns 28×28のグレースケール画像データ\r\n\t */\r\n\tconst convertImageData = () => {\r\n\t\tif (!context) return;\r\n\r\n\t\tconst inputWidth = 28;\r\n\t\tconst inputHeight = 28;\r\n\r\n\t\t// resize\r\n\t\tconst tmpCanvas = document.createElement('canvas').getContext('2d')!;\r\n\t\ttmpCanvas.drawImage(context.canvas, 0, 0, inputWidth, inputHeight);\r\n\r\n\t\t// convert grayscale\r\n\t\tlet imageData = tmpCanvas.getImageData(0, 0, inputWidth, inputHeight);\r\n\t\tfor (let i = 0; i < imageData.data.length; i += 4) {\r\n\t\t\tconst avg = (imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2]) / 3;\r\n\t\t\timageData.data[i] = imageData.data[i + 1] = imageData.data[i + 2] = avg;\r\n\t\t}\r\n\r\n\t\treturn imageData;\r\n\t};\r\n\r\n\t/**\r\n\t * 推測\r\n\t * @param imageData 28×28のグレースケール画像データ\r\n\t * @returns 結果\r\n\t */\r\n\tconst predict = (imageData: ImageData) => {\r\n\t\tif (!model) return;\r\n\r\n\t\tconst score = tf.tidy(() => {\r\n\t\t\t// convert to tensor (shape: [width, height, channels])\r\n\t\t\tconst channels = 1; // grayscale\r\n\t\t\tlet input = tf.browser.fromPixels(imageData, channels).toFloat();\r\n\t\t\t// input = input.resizeNearestNeighbor([28, 28]);\r\n\t\t\t// normalized\r\n\t\t\tinput = input.div(tf.scalar(255));\r\n\t\t\t// CNN\r\n\t\t\t// reshape input format (shape: [batch_size, width, height, channels])\r\n\t\t\tinput = input.expandDims();\r\n\r\n\t\t\t// MLP\r\n\t\t\t// input = input.reshape([1, 784]);\r\n\t\t\t// input.print();\r\n\t\t\t// console.log(input.shape);\r\n\r\n\t\t\t// predict\r\n\t\t\treturn model.predict(input);\r\n\t\t});\r\n\r\n\t\tconst result: number[] = [];\r\n\r\n\t\tconst datas = Array.isArray(score) ? score[0].dataSync() : score.dataSync();\r\n\t\tdatas.forEach(d => result.push(d));\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\tconst onClickPrediction = async () => {\r\n\t\tconst imageData = convertImageData();\r\n\t\tif (!imageData) return;\r\n\t\tsetInputImageData(imageData);\r\n\r\n\t\tconst score = predict(imageData);\r\n\t\tif (!score) return;\r\n\r\n\t\tsetScore(score);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Button variant=\"contained\" color=\"primary\" onClick={onClickPrediction}>\r\n\t\t\tPredict\r\n\t\t</Button>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { css } from '@emotion/css';\r\nimport {\r\n\tcreateStyles, Divider, List, ListItem, ListItemText, makeStyles, Theme\r\n} from '@material-ui/core';\r\nimport { scoreState } from '../store/state';\r\n\r\nexport const PredList: React.FC = () => {\r\n\tconst classes = useStyles();\r\n\tconst score = useRecoilValue(scoreState);\r\n\tconst items = [...Array(10)];\r\n\r\n\treturn (\r\n\t\t<div className={sListContainer}>\r\n\t\t\t<List className={classes.list}>\r\n\t\t\t\t{score.map((s, i) => (\r\n\t\t\t\t\t<div key={i}>\r\n\t\t\t\t\t\t<ListItem className={classes.item}>\r\n\t\t\t\t\t\t\t<ListItemText className={classes.itemNum} primary={i} />\r\n\t\t\t\t\t\t\t<div className={sGraphContainer}>\r\n\t\t\t\t\t\t\t\t<div className={sGraph(s * 100)}></div>\r\n\t\t\t\t\t\t\t\t<ListItemText className={classes.itemPer} primary={(s * 100).toFixed(2) + ' %'} />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t{items.length > i + 1 && <Divider />}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t))}\r\n\t\t\t</List>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\tlist: {\r\n\t\t\twidth: '100%',\r\n\t\t\tbackgroundColor: theme.palette.background.paper,\r\n\t\t\tpadding: 0\r\n\t\t},\r\n\t\titem: {\r\n\t\t\tdisplay: 'grid',\r\n\t\t\tgridTemplateColumns: 'auto 1fr',\r\n\t\t\tpadding: 0\r\n\t\t},\r\n\t\titemNum: {\r\n\t\t\tpadding: '0 20px',\r\n\t\t\ttextAlign: 'center',\r\n\t\t\tcolor: theme.palette.text.primary\r\n\t\t},\r\n\t\titemPer: {\r\n\t\t\ttextAlign: 'left',\r\n\t\t\tzIndex: 2,\r\n\t\t\tcolor: theme.palette.text.primary\r\n\t\t}\r\n\t})\r\n);\r\n\r\nconst sListContainer = css`\r\n\tmax-width: 300px;\r\n\t/* border: 1px solid black; */\r\n`;\r\n\r\nconst sGraphContainer = css`\r\n\tposition: relative;\r\n`;\r\n\r\nconst sGraph = (pred: number) => css`\r\n\tposition: absolute;\r\n\ttop: 0;\r\n\tleft: 0;\r\n\tbackground-color: rgba(0, 255, 0, 0.2);\r\n\twidth: ${pred}%;\r\n\theight: 100%;\r\n\tz-index: 1;\r\n`;\r\n","import React from 'react';\r\nimport { useRecoilValue, useResetRecoilState } from 'recoil';\r\nimport { Button } from '@material-ui/core';\r\nimport { contextState, inputImageDataState, scoreState } from '../store/state';\r\n\r\nexport const ResetButton: React.FC = () => {\r\n\tconst context = useRecoilValue(contextState);\r\n\tconst resetScore = useResetRecoilState(scoreState);\r\n\tconst resetInputImageData = useResetRecoilState(inputImageDataState);\r\n\r\n\tconst onClickReset = () => {\r\n\t\tif (context) {\r\n\t\t\tcontext.clearRect(0, 0, context.canvas.width, context.canvas.height);\r\n\t\t}\r\n\t\tresetScore();\r\n\t\tresetInputImageData();\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Button variant=\"contained\" color=\"secondary\" onClick={onClickReset}>\r\n\t\t\tReset\r\n\t\t</Button>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport { css } from '@emotion/css';\r\nimport { Grid } from '@material-ui/core';\r\nimport { Canvas } from './Canvas';\r\nimport { InputPreviewCanvas } from './InputPreviewCanvas';\r\nimport { PredButton } from './PredButton';\r\nimport { PredList } from './PredList';\r\nimport { ResetButton } from './ResetButton';\r\n\r\nexport const MainLayout: React.FC = () => {\r\n\treturn (\r\n\t\t<Grid container spacing={1}>\r\n\t\t\t<Grid item xs={12} sm={6}>\r\n\t\t\t\t<div className={sCanvasContainer}>\r\n\t\t\t\t\t<Canvas />\r\n\t\t\t\t\t<div className={sControllerContainer}>\r\n\t\t\t\t\t\t<PredButton />\r\n\t\t\t\t\t\t<ResetButton />\r\n\t\t\t\t\t\t<InputPreviewCanvas />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</Grid>\r\n\t\t\t<Grid item xs={12} sm={6}>\r\n\t\t\t\t<div className={sListContainer}>\r\n\t\t\t\t\t<PredList />\r\n\t\t\t\t</div>\r\n\t\t\t</Grid>\r\n\t\t</Grid>\r\n\t);\r\n};\r\n\r\nconst sCanvasContainer = css`\r\n\twidth: 300px;\r\n\tmargin: auto;\r\n`;\r\n\r\nconst sControllerContainer = css`\r\n\tdisplay: grid;\r\n\tgrid-template-columns: 1fr 1fr auto;\r\n\talign-items: center;\r\n\tgrid-gap: 10px;\r\n`;\r\n\r\nconst sListContainer = css`\r\n\twidth: 300px;\r\n\tmargin: auto;\r\n`;\r\n","import React from 'react';\nimport { css } from '@emotion/css';\nimport { createTheme, ThemeProvider } from '@material-ui/core';\nimport { MainLayout } from './MainLayout';\n\nexport const App: React.FC = () => {\n\tconst theme = createTheme({\n\t\tpalette: {\n\t\t\ttype: 'dark'\n\t\t}\n\t});\n\n\treturn (\n\t\t<ThemeProvider theme={theme}>\n\t\t\t<div className={sContainer}>\n\t\t\t\t<div className={sCardContainer}>\n\t\t\t\t\t<MainLayout />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</ThemeProvider>\n\t);\n};\n\nconst sCardContainer = css`\n\twidth: 620px;\n\tpadding: 20px;\n\tmargin: 20px;\n\tbackground-color: rgba(0, 0, 0, 0.5);\n\tborder-radius: 10px;\n`;\n\nconst sContainer = css`\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\theight: 100vh;\n\tbackground-image: url('https://images.unsplash.com/photo-1573220322218-a350fe275a24?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1188&q=80');\n\tbackground-size: cover;\n\tbackground-position: center;\n`;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\nimport { App } from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<RecoilRoot>\n\t\t\t<App />\n\t\t</RecoilRoot>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}